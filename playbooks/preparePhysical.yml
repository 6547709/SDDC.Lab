###     Module Owner: Luis
### Conversion to V2: Done
### Converted to support STATIC Config files
##
##  Desired Enhancements:
##    1) Set network_policy/security sections based on ESXi version to optimize network usage.
## 
##
---
- hosts: localhost
  name: preparePhysical.yml
  gather_facts: false
  vars_files:
    - ../config.yml
    - ../software.yml
  tasks:
    - name: Display error message if Pod-XXX-Config file is not valid or provided
      pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}

                                       Target.vSwitch: {{ Target.vSwitch }}
                          Target.PortGroup.Trunk.Name: {{ Target.PortGroup.Trunk.Name }}
                          Target.PortGroup.Trunk.VLAN: {{ Target.PortGroup.Trunk.VLAN }}
                     Target.PortGroup.Management.Name: {{ Target.PortGroup.Management.Name }}
                     Target.PortGroup.Management.VLAN: {{ Target.PortGroup.Management.VLAN }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true


##
## Create vSphere Standard Switch
##
    - name: Create a VMware vSphere Standard Switch (vSS) on the ESXi host
      vmware_vswitch:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false
        esxi_hostname: "{{ Target.FQDN }}"
        switch_name: "{{ Target.vSwitch }}"
        mtu: 9000
      when:
        - Target.Deployment == "Host"

    - name: Create a management port group for the lab environment
      vmware_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false        
        esxi_hostname: "{{ Target.FQDN }}"
        switch_name: "{{ Target.vSwitch }}"
        portgroup_name: "{{ Target.PortGroup.Management.Name }}"
        vlan_id: "{{ Target.PortGroup.Management.VLAN }}"
        security:
          promiscuous_mode: True
      when:
        - Target.Deployment == "Host"

    - name: Create trunk port group for the lab environment
      vmware_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false
        esxi_hostname: "{{ Target.FQDN }}"
        switch_name: "{{ Target.vSwitch }}"
        portgroup_name: "{{ Target.PortGroup.Trunk.Name }}"
        vlan_id: "{{ Target.PortGroup.Trunk.VLAN }}"
        security:
          promiscuous_mode: True
          forged_transmits: True
          mac_changes: True
      when:
        - Target.Deployment == "Host"
          

##
## Create vSphere Disributed Switch
##
    - name: Create a VMware vSphere Distributed Switch (vDS) in vCenter
      vmware_dvswitch:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        datacenter_name: "{{ Target.DataCenter }}"
        validate_certs: false
        description: "Pod-{{ Pod.Number }} vDS"
        switch_name: "{{ Target.vSwitch }}"
        discovery_operation: both
        discovery_proto: lldp
        switch_version: "{{ Target.vSwitchVersion }}"
        uplink_prefix: "Pod-{{ Pod.Number }}-Uplink"
        uplink_quantity: 1
        state: present
        mtu: 9000
      when:
        - Target.Deployment == "vCenter"

    - name: Create a Management Distributed Port-Group in vCenter
      vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: lateBinding                                  # *TBD*-Need to verify lateBinding is appropriate
        portgroup_name: "{{ Target.PortGroup.Management.Name }}"
        vlan_id: "{{ Target.PortGroup.Management.VLAN }}"
        vlan_trunk: false
        num_ports: 32
        state: present
        network_policy:
          promiscuous: True
      when:
        - Target.Deployment == "vCenter"

    - name: Create a Trunk Distributed Port-Group in vCenter
      vmware_dvs_portgroup:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false
        switch_name: "{{ Target.vSwitch }}"
        portgroup_type: lateBinding                                  # *TBD*-Need to verify lateBinding is appropriate
        portgroup_name: "{{ Target.PortGroup.Trunk.Name }}"
        vlan_id: "{{ Target.PortGroup.Trunk.VLAN }}"
        vlan_trunk: true
        num_ports: 32
        state: present
        network_policy:
          promiscuous: True
          forged_transmits: True
          mac_changes: True
      when:
        - Target.Deployment == "vCenter"



    - name: Wait 5 seconds for the port groups to become available
      pause: seconds=5

