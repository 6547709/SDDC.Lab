## Luis has ownership of this file for the v2 migration ##
---
- hosts: localhost
  gather_facts: false
  vars:
    NewLine: "\n"
  vars_files:
    - ../software.yml
#    - ../licenses.yml
    - ../config.yml
#    - ../answerfile.yml
  tasks:
    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ========================= DEBUG: Display Variables ==========================

                          Target.Deployment: {{ Target.Deployment }}

                                Target.FQDN: {{ Target.FQDN }}
                                Target.User: {{ Target.User }}
                            Target.Password: {{ Target.Password }}
                             Target.vSwitch: {{ Target.vSwitch }}
                             Target.Cluster: {{ Target.Cluster }}
                          Target.DataCenter: {{ Target.DataCenter }}
                           Target.Datastore: {{ Target.Datastore }}
                            Target.VMFolder: {{ Target.VMFolder }}
                           Target.ISOFolder: {{ Target.ISOFolder }}
                          Target.TempFolder: {{ Target.TempFolder }}

                     Target.PortGroup.VLAN : {{ Target.PortGroup.VLAN }}
                     Target.PortGroup.Trunk: {{ Target.PortGroup.Trunk }}

             Deploy.Software.Router.Version: {{ Deploy.Software.Router.Version }}

          =============================================================================
      when:
        - DEBUG.DisplayVariables == true


    - name: Check if the VyOS router is already deployed
      vmware_guest_info:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_Router.Name }}"
        schema: "vsphere"
        properties: ["overallStatus"]
      delegate_to: localhost
      register: status
      ignore_errors: true
      no_log: true
      when: 
        - Deploy.Router == true


    - name: Create configuration template file for VyOS router
      template: 
        src: "../templates/{{ Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].Template }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
      when: 
        - Deploy.Router == true
        - status is failed


    - name: Download VyOS OVA (Both Legacy and Latest)
      get_url:
        url: "{{ Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].Location }}/{{Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].File }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        force: "{{ 'yes' if Deploy.Software.Router.Version == 'Latest' else 'no' }}"
      when: 
        - Deploy.Router == true
        - status is failed


##
## The below tasks are for the deploying the VyOS **LEGACY**  release
##

    - name: Deploy VyOS router (Legacy)
      vmware_deploy_ovf:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        allow_duplicates: no
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        datastore: "{{ Target.Datastore }}"
        name: "{{ Nested_Router.Name }}"
        ovf: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        networks:
          "public": "{{ Nested_Router.Interface.Uplink.PortGroup }}"
          "internal": "{{ Target.PortGroup.Trunk }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: true
        wait: true
        wait_for_ip_address: yes
      delegate_to: localhost
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"


    - name: Configure VyOS router (Legacy)
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ Nested_Router.Name }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"


    - name: Reboot VyOS VM (Legacy)
      vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: reboot-guest
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"


##
## Delete moved to end as it's needed for both Legacy and Latest
##
#    - name: Delete the temporary template file for VyOS router
#      file: 
#        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
#        state: absent
#      when: 
#        - Deploy.Router == true
#        - Deploy.Software.Router.Version == "Legacy"
#        - DEBUG.KeepConfigFiles != true


##
## Merged with "Legacy" download using a conditional.  Move above Legacy/Latest sections
##
#    - name: Download VyOS rolling release ISO
#      get_url:
#        url: https://downloads.vyos.io/rolling/current/amd64/vyos-rolling-latest.iso
#        dest: "{{ VyosIso }}"
#        force: true
#      when: 
#        - deploy_router == true
#        - status is failed
#        - router_version == "latest"


##
## The Below tasks are for the deploying the VyOS rolling ('**Latest**') release
##

    - name: Upload the VyOS ISO to the datastore (Latest)
      vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
      tags: upload
      when: 
        - Deploy.Router  == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Create VyOS router VM on vCenter (Latest)
      vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: poweredon
        guest_id: debian10_64Guest
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        disk:
        - size_gb: "10"
          type: "{{ Common.DiskProvisioning }}"
          datastore: "{{ Target.Datastore }}"
        hardware:
          memory_mb: "512"
          num_cpus: "1"
          num_cpu_cores_per_socket: "1"
          scsi: paravirtual
        networks:
          - name: "{{ Nested_Router.Interface.Uplink.PortGroup }}"
            device_type: vmxnet3
          - name: "{{ Target.PortGroup.Trunk }}"
            device_type: vmxnet3
        cdrom:
          type: "iso"
          iso_path: "[{{ Target.Datastore }}] {{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"
        - Target.Deployment == "vCenter"


    - name: Create VyOS router VM directly onto the ESXi Host (Latest)
      vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: poweredon
        guest_id: debian10_64Guest
        esxi_hostname: "{{ Target.FQDN }}"
        folder: "{{ Target.VMFolder }}"
        disk:
        - size_gb: "10"
          type: "{{ Common.DiskProvisioning }}"
          datastore: "{{ Target.Datastore }}"
        hardware:
          memory_mb: "512"
          num_cpus: "1"
          num_cpu_cores_per_socket: "1"
          scsi: paravirtual
        networks:
          - name: "{{ Nested_Router.Interface.Uplink.PortGroup }}"
            device_type: vmxnet3
          - name: "{{ Target.PortGroup.Trunk }}"
            device_type: vmxnet3
        cdrom:
          type: "iso"
          iso_path: "[{{ Target.Datastore }}] {{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"
        - Target.Deployment == "Host"


    - name: Wait 45 seconds for the VyOS router to boot
      pause:
        seconds: 45
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 1 (Enter 'vyos' username)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        string_send: "vyos"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause:
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 2 (Press 'ENTER' after username and enter password)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
        string_send: "vyos"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause:
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


##
#### This may be an extra 'vyos' send, changed to just sending ENTER
##
    - name: Walk through the setup dialog 3 (Press 'vyos' password)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        string_send: "vyos"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause:
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 4
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
        string_send: "install image"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause:
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 5 (Destroy data on /dev/sda)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "yes"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause:
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 6 (Create root partition and confirm with 'vyos' password)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "vyos"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause: 
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 7 (Re-enter 'vyos' password to confirm)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
        string_send: "vyos"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


#    - name: Wait 5 seconds
#      pause: 
#        seconds: 5
#      when: 
#        - Deploy.Router == true
#        - status is failed
#        - Deploy.Software.Router.Version == "Latest"


    - name: Walk through the setup dialog 8 (Configure GRUB on boot partition)
      vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Wait 30 seconds before rebooting the VyOS router
      pause: 
        seconds: 30
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Reboot VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: reboot-guest
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Wait 1 minute for the VyOS router to boot
      pause: 
        minutes: 1
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Copy configuration to VyOS router (Latest)
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ Nested_Router.Name }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Shutdown VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: shutdown-guest
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Wait 10 seconds for the VyOS VM to shut down.
      pause: 
        seconds: 10
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Disconnect CDROM on VyOS router VM
      vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        cdrom:
          type: "none"
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


    - name: Start the VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: powered-on
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"


##
## Below tasks are for both the VyOS legacy and rolling release
##

    - name: Delete the temporary template file for VyOS router (Both Legacy and Latest)
      file: 
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        state: absent
      when: 
        - Deploy.Router == true
        - status is failed
        - DEBUG.KeepConfigFiles != true


    - name: Delete the temporary installer file for VyOS router (Both Legacy and Latest)
      file: 
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        state: absent
      when: 
        - Deploy.Router == true
        - status is failed
        - DEBUG.KeepInstallerFiles != true


    - name: Write annotation on the VyOS VM
      vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        annotation: "The password for the vyos user is {{ Common.Password.Nested }}"
      when: 
        - Deploy.Router == true
        - status is failed


    - name: Add static route on the Ansible control node
      command: ./ip route add "{{ Net.Management.IPv4.Network }}.0/{{ Net.Management.IPv4.Prefix }}" via "{{ Nested_Router.Uplink.IPv4.Address }}"
      args:
        chdir: /bin/
      register: iproute
      ignore_errors: true
      when: 
        - Deploy.Router == true
        - Nested_Router.Protocol == "Static"
        - status is failed


    - name: Wait 10 seconds
      pause: seconds=10
      when: 
        - Deploy.Router == true
        - status is failed

