## Luis has ownership of this file for the v2 migration ##
---
- hosts: localhost
  gather_facts: false
  vars_files:
    - ../software.yml
    - ../licenses.yml
    - ../config.yml
    - ../answerfile.yml
  tasks:
    - name: Check if the VyOS router is already deployed
      vmware_guest_info:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        name: "{{ Nested.Router.Name }}"
        schema: "vsphere"
        properties: ["overallStatus"]
      delegate_to: localhost
      register: status
      ignore_errors: true
      no_log: true
      when: 
        - Deploy.Router == true

    - name: Create template file for the VyOS router
      template: 
      	src: "../templates/{{ Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].Template }}"
        dest: "{{ Deploy.Software.Router.Config }}"
      when: 
        - Deploy.Router == true
        - status is failed

    - name: Download VyOS OVA (Both Legacy and Latest)
      get_url:
        url: "{{ Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].Location }}/{{Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].File }}"
        dest: "{{ Deploy.Software.Router.Installer }}"
        force: "{{ 'yes' if Deploy.Software.Router.Version == 'Latest' else 'no' }}"
      when: 
        - Deploy.Router == true
        - status is failed

# The below tasks are for the deploying the VyOS legacy release

    - name: Deploy VyOS router
      vmware_deploy_ovf:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        allow_duplicates: no
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        datastore: "{{ Target.Datastore }}"
        name: "{{ Nested.Router.Name }}"
        ovf: "{{ Deploy.Software.Router.Installer }}"
        networks:
          "public": "{{ Nested.Router.Uplink.PortGroup }}"
          "internal": "{{ Target.PortGroup.Trunk }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: true
        wait: true
        wait_for_ip_address: yes
      delegate_to: localhost
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Configure VyOS router
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ Nested.Router.Name }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "{{ Deploy.Software.Router.Config }}"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Reboot VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested.Router.Name }}"
        state: reboot-guest
      when: 
        - Deploy.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Delete the temporary template file for VyOS router
      file: 
        path: "{{ Deploy.Software.Router.Config }}"
        state: absent
      when: 
        - Deploy.Router == true
        - Deploy.Software.Router.Version == "Legacy"
        - DEBUG.KeepConfigFiles != true



# The Below tasks are for the deploying the VyOS rolling ('Latest') release

### Merged with "Legacy" download using a conditional.  Move above Legacy/Latest sections
#    - name: Download VyOS rolling release ISO
#      get_url:
#        url: https://downloads.vyos.io/rolling/current/amd64/vyos-rolling-latest.iso
#        dest: "{{ VyosIso }}"
#        force: true
#      when: 
#        - deploy_router == true
#        - status is failed
#        - router_version == "latest"

    - name: Upload the VyOS ISO to the datastore
      vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        src: "{{ Deploy.Software.Router.Installer }}"
        datastore: "{{ Target.Datastore }}" 
        path: "/Lab-ISO-Folder/vyos-rolling-latest.iso"
      tags: upload
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"


"/{{Software[Deploy.Software.Router.Vendor][Deploy.Software.Router.Product]['Installers'][Deploy.Software.Router.Version].File }}"


    - name: Create VyOS router VM
      vmware_guest:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        state: poweredon
        guest_id: debian10_64Guest
        esxi_hostname: "{{ physicalESX.fqdn }}"
        folder: /ha-datacenter/vm
        disk:
        - size_gb: "10"
          type: thin
          datastore: "{{ physicalESX.datastore }}"
        hardware:
          memory_mb: "512"
          num_cpus: "1"
          num_cpu_cores_per_socket: "1"
          scsi: paravirtual
        networks:
          - name: "{{ router_public_pg }}"
            device_type: vmxnet3
          - name: "{{ physicalESX.trunkpg }}"
            device_type: vmxnet3
        cdrom:
          type: "iso"
          iso_path: "[{{ physicalESX.datastore }}] Lab-ISO-Folder/vyos-rolling-latest.iso"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 1 minute for the VyOS router to boot
      pause:
        minutes: 1
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 1
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        string_send: "vyos"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 2
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
        string_send: "vyos"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 3
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        string_send: "vyos"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 4
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
        string_send: "install image"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 5
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "yes"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause:
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 6
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "vyos"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause: 
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 7
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
        string_send: "vyos"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 5 seconds
      pause: 
        seconds: 5
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Walk through the setup dialog 8
      vmware_guest_sendkey:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        keys_send:
          - ENTER
          - ENTER
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 30 seconds before rebooting the VyOS router
      pause: 
        seconds: 30
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Reboot VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        state: reboot-guest
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 1 minute for the VyOS router to boot
      pause: 
        minutes: 1
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Configure VyOS router
      vmware_guest_file_operation:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        vm_id: "{{ router_vmname }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "/tmp/vyos.conf"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Shutdown VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        state: shutdown-guest
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Wait 10 seconds for the VyOS VM to shut down.
      pause: 
        seconds: 10
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Disconnect CDROM on VyOS router VM
      vmware_guest:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        cdrom:
          type: "none"
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Start the VyOS VM
      vmware_guest_powerstate:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        state: powered-on
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"

    - name: Delete the temporary template file for VyOS router
      file: 
        path: "/tmp/vyos.conf"
        state: absent
      when: 
        - deploy_router == true
        - status is failed
        - router_version == "latest"
        - DEBUG_keep_config_files != true

# Below tasks are for both the VyOS legacy and rolling release

    - name: Write annotation on the VyOS VM
      vmware_guest:
        hostname: "{{ physicalESX.fqdn }}"
        username: "{{ physicalESX.user }}"
        password: "{{ physicalESX.password }}"
        validate_certs: no
        name: "{{ router_vmname }}"
        annotation: "The password for the vyos user is VMware1!"
      when: 
        - deploy_router == true
        - status is failed

    - name: Add static route on the Ansible control node
      command: ./ip route add "{{ pod_network }}.{{ pod + management }}.0/24" via "{{ router_public_ip.split("/")[0] }}"
      args:
        chdir: /bin/
      register: iproute
      ignore_errors: true
      when: 
        - deploy_router == true
        - router.protocol == "static"
        - status is failed

    - name: Wait 10 seconds
      pause: seconds=10
      when: 
        - deploy_router == true
        - status is failed

