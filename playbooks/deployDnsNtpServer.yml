---
- hosts: localhost
  name: deployDnsNtpServer.yml
  gather_facts: false
  vars:
    # Playbook specific settings
    LOCAL_TempDir: "/tmp"
    LOCAL_WorkingDir: "/tmp/ubuntu20"
    LOCAL_UbuntuISO: "ubuntu-20.04-live-server-amd64.iso"
    LOCAL_UbuntuISO_URL: "https://releases.ubuntu.com/20.04/ubuntu-20.04-live-server-amd64.iso"
    LOCAL_New_UbuntuISO: "Ubuntu2004.iso"

    # Templates and files
    LOCAL_UbuntuTemplateUserData: "../templates/Ubuntu_user-data.j2"
    LOCAL_UbuntuTemplateNetplan: "../templates/Ubuntu_00-installer-config.j2"
    LOCAL_BINDTemplateNamedConf: "../templates/BIND_named.conf"
    LOCAL_BINDTemplateNamedConfOptions: "../templates/BIND_named.conf.options.j2"
    LOCAL_BINDTemplateNamedConfLocal: "../templates/BIND_named.conf.local.j2"
    LOCAL_BINDTemplateForwardZone: "../templates/BIND_db.forwardzone.j2"
    LOCAL_BINDTemplateReverseZoneIPv4: "../templates/BIND_db.reversezoneipv4.j2"
    LOCAL_BINDTemplateReverseZoneIPv6: "../templates/BIND_db.reversezoneipv6.j2"

    # Ubuntu VM settings
    LOCAL_UbuntuVMName: "dns"
    LOCAL_UbuntuVMDiskSize: "50"           # gigabytes
    LOCAL_UbuntuVMMemorySize: "2048"       # megabytes
    LOCAL_UbuntuVMCPUs: "1"
    LOCAL_UbuntuVMCPUCores: "1"

    # Ubuntu OS settings
    LOCAL_UbuntuOSLocale: "en_US"
    LOCAL_UbuntuOSKeyboardLayout: "en"
    LOCAL_UbuntuOSKeyboardVariant: "us"
    LOCAL_UbuntuOSIPv4Address: "10.203.0.5/24"
    LOCAL_UbuntuOSIPv4Gateway: "10.203.0.1"
    LOCAL_UbuntuOSIPv4DNS: "10.2.129.10"
    LOCAL_UbuntuOSHostname: "dns"
    LOCAL_UbuntuOSUser: "ubuntu"

    # BIND settings
    LOCAL_BINDUpstreamDNS: "10.2.129.10"
    LOCAL_BINDIPAddress: "10.203.0.5"
    LOCAL_BINDACLLabNetwork: "10.0.0.0/8"
    LOCAL_BINDACLAnsibleController: "10.2.129.19"
    LOCAL_BINDZoneFilePath: "/var/lib/bind"
    LOCAL_BINDForwardZoneFile: "db.{{ Common.DNS.Domain | lower }}"
    LOCAL_BINDReverseZoneNameIPv4: "203.10.in-addr.arpa"
    LOCAL_BINDReverseZoneFileIPv4: "db.10.203"
    LOCAL_BINDReverseZoneNameIPv6: "0.0.d.f.ipv6.arpa"
    LOCAL_BINDReverseZoneFileIPv6: "db.fd00"
  
  tasks:
    - name: Display error message if Pod-XXX-Config file is not valid or provided
      pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: Create working directory on Ansible Controller
      file:
        path: "{{ LOCAL_WorkingDir }}"
        state: directory

    - name: Check if Ubuntu ISO exists locally on Ansible Controller
      stat:
        path: "{{ LOCAL_TempDir }}/{{ LOCAL_UbuntuISO }}"
      register: InstallerFileCheck

    - name: Download Ubuntu ISO (if ISO file doesn't exist locally)
      get_url:
        url:  "{{ LOCAL_UbuntuISO_URL }}"
        dest: "{{ LOCAL_TempDir }}/{{ LOCAL_UbuntuISO }}"
      when:
        - InstallerFileCheck.stat.exists != true
        
    - name: Mount Ubuntu ISO
      action: mount name="{{ LOCAL_WorkingDir }}/iso" src="{{ LOCAL_TempDir }}/{{ LOCAL_UbuntuISO }}" opts=loop fstype=iso9660 state=mounted
      when:

    - name: Copy Ubuntu ISO contents to working directory
      copy: 
        src: "{{ LOCAL_WorkingDir }}/iso/"
        dest: "{{ LOCAL_WorkingDir }}/isocopy/"

    - name: Unmount Ubuntu ISO
      action: mount name="{{ LOCAL_WorkingDir }}/iso" src="{{ LOCAL_TempDir }}/{{ LOCAL_UbuntuISO }}" fstype=iso9660 state=absent

    - name: Edit txt.cfg to modify append line 
      replace:
        dest: "{{ LOCAL_WorkingDir }}/isocopy/isolinux/txt.cfg"
        regexp: 'append   initrd=/casper/initrd quiet  ---'
        replace: 'append   initrd=/casper/initrd quiet --- autoinstall ds=nocloud;s=/cdrom/SDDC.Lab/'

    - name: Create directory to store user-data and meta-data
      file:
        path: "{{ LOCAL_WorkingDir }}/isocopy/SDDC.Lab"
        state: directory

    - name: Copy user-data file to directory
      template: 
        src: "{{ LOCAL_UbuntuTemplateUserData }}"
        dest: "{{ LOCAL_WorkingDir }}/isocopy/SDDC.Lab/user-data"

    - name: Create empty meta-data file in directory
      file:
        path: "{{ LOCAL_WorkingDir }}/isocopy/SDDC.Lab/meta-data"
        state: touch

    - name: Create custom Ubuntu ISO
      command: "xorrisofs -relaxed-filenames -J -R -o {{ LOCAL_TempDir }}/{{ LOCAL_New_UbuntuISO }} -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ LOCAL_WorkingDir }}/isocopy/"
      args:
        chdir: "{{ LOCAL_WorkingDir }}/isocopy/"

    - name: Upload the custom Ubuntu ISO to the datastore
      vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        src: "{{ LOCAL_TempDir }}/{{ LOCAL_New_UbuntuISO }}" 
        datastore: "{{ Target.Datastore }}"
        path: "{{ Target.ISOFolder }}/{{ LOCAL_New_UbuntuISO }}"

    - name: Deploy Ubuntu VM
      vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ LOCAL_UbuntuVMName }}"
        state: poweredon
        guest_id: ubuntu64Guest
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        disk:
        - size_gb: "{{ LOCAL_UbuntuVMDiskSize }}"
          type: "{{ Common.DiskProvisioning }}"
          datastore: "{{ Target.Datastore }}"
        hardware:
          memory_mb: "{{ LOCAL_UbuntuVMMemorySize }}"
          num_cpus: "{{ LOCAL_UbuntuVMCPUs }}"
          num_cpu_cores_per_socket: "{{ LOCAL_UbuntuVMCPUCores }}"
          scsi: paravirtual
        networks:
          - name: "{{ Target.PortGroup.RouterUplink }}"
            device_type: vmxnet3
        cdrom:
          type: "iso"
          iso_path: "[{{ Target.Datastore }}] {{ LOCAL_DataStoreDir }}/{{ LOCAL_New_UbuntuISO }}"
        annotation: "Username: {{ LOCAL_UbuntuOSUser }} Password: VMware1!"

    - name: Wait 15 minutes for the Ubuntu installation to complete
      pause:
        seconds: 900

    - name: Copy network configuration file to working directory
      template: 
        src: "{{ LOCAL_UbuntuTemplateNetplan }}"
        dest: "{{ LOCAL_WorkingDir }}/00-installer-config.yaml"

    - name: Copy network configuration file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/00-installer-config.yaml"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/00-installer-config.yaml"

    - name: Move network configuration file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/00-installer-config.yaml /etc/netplan/00-installer-config.yaml"

    - name: Apply the network configurarion on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "netplan apply"

    - name: Copy BIND named.conf file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_BINDTemplateNamedConf }}"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/named.conf"

    - name: Move BIND named.conf file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/named.conf /etc/bind/named.conf"

    - name: Copy BIND named.conf.options file to working directory
      template: 
        src: "{{ LOCAL_BINDTemplateNamedConfOptions }}"
        dest: "{{ LOCAL_WorkingDir }}/named.conf.options"

    - name: Copy BIND named.conf.options file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/named.conf.options"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/named.conf.options"

    - name: Move BIND named.conf.options file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/named.conf.options /etc/bind/named.conf.options"

    - name: Copy BIND named.conf.local file to working directory
      template: 
        src: "{{ LOCAL_BINDTemplateNamedConfLocal }}"
        dest: "{{ LOCAL_WorkingDir }}/named.conf.local"

    - name: Copy BIND named.conf.local file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/named.conf.local"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/named.conf.local"

    - name: Move BIND named.conf.local file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/named.conf.local /etc/bind/named.conf.local"

    - name: Copy BIND forward zone file to working directory
      template: 
        src: "{{ LOCAL_BINDTemplateForwardZone }}"
        dest: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDForwardZoneFile }}"

    - name: Copy BIND forward zone file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDForwardZoneFile }}"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDForwardZoneFile}}"

    - name: Move BIND forward zone file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDForwardZoneFile }} {{ LOCAL_BINDZoneFilePath }}/{{ LOCAL_BINDForwardZoneFile }}"

    - name: Copy BIND IPv4 reverse zone file to working directory
      template: 
        src: "{{ LOCAL_BINDTemplateReverseZoneIPv4 }}"
        dest: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDReverseZoneFileIPv4 }}"

    - name: Copy BIND IPv4 reverse zone file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDReverseZoneFileIPv4 }}"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDReverseZoneFileIPv4 }}"

    - name: Move BIND IPv4 zone file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDReverseZoneFileIPv4 }} {{ LOCAL_BINDZoneFilePath }}/{{ LOCAL_BINDReverseZoneFileIPv4 }}"

    - name: Copy BIND IPv6 reverse zone file to working directory
      template: 
        src: "{{ LOCAL_BINDTemplateReverseZoneIPv6 }}"
        dest: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDReverseZoneFileIPv6 }}"

    - name: Copy BIND IPv6 reverse zone file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        copy:
            src: "{{ LOCAL_WorkingDir }}/{{ LOCAL_BINDReverseZoneFileIPv6 }}"
            dest: "/home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDReverseZoneFileIPv6 }}"

    - name: Move BIND IPv6 zone file to correct location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ LOCAL_UbuntuOSUser }}/{{ LOCAL_BINDReverseZoneFileIPv6 }} {{ LOCAL_BINDZoneFilePath }}/{{ LOCAL_BINDReverseZoneFileIPv6 }}"

    - name: Set correct owner on BIND zone file directory on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "chown bind:bind /var/lib/named/ -R"

    - name: Create BIND log directory on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mkdir /var/log/named"

    - name: Set correct owner on BIND log directory on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "chown bind:bind /var/log/named"

    - name: Restart BIND on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ LOCAL_UbuntuVMName }}"
        vm_username: "{{ LOCAL_UbuntuOSUser }}"
        vm_password: "VMware1!"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "systemctl restart named"

    - name: Delete working directory on Ansible controller
      file:
        path: "{{ LOCAL_WorkingDir }}"
        state: absent
