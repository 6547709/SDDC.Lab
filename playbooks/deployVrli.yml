---
- hosts: localhost
  name: deployVrli.yml
  gather_facts: false
  vars_files:
    - ../licenses.yml
#  vars:
#    LOCAL_vRLILicenseKey: "{{ lookup('file', '/Software/vrlilicense.txt') }}"
  tasks:
    - name: Display error message if Pod-XXX-Config file is not valid or provided
      pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================


                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}

                                         vRLI Version: {{ Deploy.Software.vRLI.Version }}
                                            vRLI FQDN: {{ Nested_vRLI.FQDN }}
                                          vRLI VMName: {{ Nested_vRLI.VMName }}
                                      vRLI Admin User: {{ Nested_vRLI.Credentials.admin.Name }}
                                  vRLI Admin Password: {{ Nested_vRLI.Credentials.admin.Password }}


                                                OVF Variables
                                                =============

                                            vRLI Size: {{ Nested_vRLI.Deployment.Size }}
                                    Network PortGroup: {{ Target.PortGroup.Management.Name }}

                                 Network IPv4 Address: {{ Nested_vRLI.Address.IPv4.Address }}
                                      Network Netmask: {{ (Nested_vRLI.Address.IPv4.Address + '/' + Nested_vRLI.Address.IPv4.Prefix) | ipaddr('netmask') }}
                                      Network Gateway: {{ Nested_vRLI.Address.IPv4.Gateway }}

                                   Network DNS Server: {{ Common.DNS.Server1.IPv4 }}
                                   Network DNS Domain: {{ Common.DNS.Domain }}

                                   vRLI Root Password: {{ Nested_vRLI.Credentials.root.Password }}

                                      vRLI Media Path: {{ Deploy.Software.vRLI.Directory }}
                                      vRLI Media File: {{ Deploy.Software.vRLI.File }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Check if vRLI is already installed
      uri:
        url: https://{{ Nested_vRLI.FQDN }}
        validate_certs: false
        timeout: 5
      register: vrli_check
      ignore_errors: true
      failed_when: false
      no_log: true
      when: Deploy.vRLI == true

    - name: Deploy vRLI from OVA
      vmware_deploy_ovf:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: false
        datastore: "{{ Target.Datastore }}"
        allow_duplicates: false
        folder: "{{ Target.VMFolder }}"
        datacenter: "{{ Target.DataCenter }}"
        cluster: "{{ Target.Cluster }}"
        name: "{{ Nested_vRLI.VMName }}"
        ovf: "{{ Deploy.Software.vRLI.Directory }}/{{ Deploy.Software.vRLI.File }}"
        deployment_option: "{{ Nested_vRLI.Deployment.Size }}"
        networks:
          "Network 1": "{{ Target.PortGroup.Management.Name }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: true
        wait_for_ip_address: true
        inject_ovf_env: true
        properties:
          ## vm.vmname appears to be used as the 'cn' in the X.509 Cert.  So, why not set it to "Nested_vRLI.FQDN"?
#          vm.vmname: "VMware_vCenter_Log_Insight"
#          vm.vmname: "{{ Nested_vRLI.FQDN }}"  <<-- Putting this in results in the VM _NOT_ having an IPv4 address..only IPv6.  Maybe try just putting in Nested_vRLI.VMName.
          vm.vmname: "{{ Nested_vRLI.VMName }}"
          preferipv6: "False"
          rootpw: "{{ Nested_vRLI.Credentials.root.Password }}"
          hostname: "{{ Nested_vRLI.FQDN }}"
          vami.DNS.VMware_vCenter_Log_Insight: "{{ Common.DNS.Server1.IPv4 }}"
          vami.domain.VMware_vCenter_Log_Insight: "{{ Common.DNS.Domain }}"
          vami.gateway.VMware_vCenter_Log_Insight: "{{ Nested_vRLI.Address.IPv4.Gateway }}"
          vami.ip0.VMware_vCenter_Log_Insight: "{{ Nested_vRLI.Address.IPv4.Address }}"
          vami.netmask0.VMware_vCenter_Log_Insight: "{{ (Nested_vRLI.Address.IPv4.Address + '/' + Nested_vRLI.Address.IPv4.Prefix) | ipaddr('netmask') }}"
          vami.searchpath.VMware_vCenter_Log_Insight: "{{ Common.DNS.Domain }}"
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200

    ## Instead of waiting for 5 minutes (which wasn't enouh for me), why not loop until you get a response from the main page https://{{ Nested_vRLI.FQDN }} ?   Make the check every 1 minute, and have it last for max of 10 minutes.
    - name: Wait 5 minutes for the vRLI API to become available
      pause: seconds=300
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200

    - name: Perform vRLI bootstrap
      uri:
        url: https://{{ Nested_vRLI.FQDN }}:9543/api/v1/deployment/new
        validate_certs: no
        method: POST
        timeout: 120
        body:
          user:
            userName: "{{ Nested_vRLI.Credentials.admin.Name }}"
            password: "{{ Nested_vRLI.Credentials.admin.Password }}"
            email: "{{ (Nested_vRLI.Credentials.admin.Name + '@' + Common.DNS.Domain) }}"
        body_format: json
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200

    - name: Obtain a session ID from the vRLI API 
      uri:
        url: https://{{ Nested_vRLI.FQDN }}:9543/api/v1/sessions
        validate_certs: no
        method: POST
        body:
          username: "{{ Nested_vRLI.Credentials.admin.Name }}"
          password: "{{ Nested_vRLI.Credentials.admin.Password }}"
          provider: "Local"
        body_format: json
      register: vrli_session
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200

#    - name: Check if the vRLI license file exists
#      stat: 
#        path: "/Software/vrlilicense.txt"
#      register: vrlilicensefile
#      when:
#        - Deploy.vRLI == true
#        - vrli_check.status != 200

    - name: Add all licenses to vRLI
      uri:
        url: https://{{ Nested_vRLI.FQDN }}:9543/api/v1/licenses
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ vrli_session.json.sessionId }}"
        body:
          key: "{{ item.KeyCode }}" 
        body_format: json
        status_code: 201
      loop: "{{ License.VMware.vRLI.Licenses }}"
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200
        - Deploy.Software.vRLI.Version is match(item.Version)
#        - vrlilicensefile.stat.exists == true

    - name: Add vSphere to vRLI
      uri:
        url: https://{{ Nested_vRLI.FQDN }}:9543/api/v1/vsphere
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ vrli_session.json.sessionId }}"
        body:
          hostname: "{{ Nested_vCenter.FQDN }}"
          username: "{{ Nested_vCenter.User }}"
          password: "{{ Nested_vCenter.Password }}"
          acceptCert: true
          syslogProtocol: "tcp"
          configureNewEsxiHostsAutomatically: true
          vsphereEventsEnabled: true
          target: "{{ Nested_vRLI.Address.IPv4.Address }}"
        body_format: json
        status_code: 201
      when:
        - Deploy.vRLI == true
        - vrli_check.status != 200