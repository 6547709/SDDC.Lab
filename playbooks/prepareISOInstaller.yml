## Rutger has ownership of this file for the v2 migration ##
---
- hosts: localhost
  name: prepareISOInstaller.yml
  gather_facts: false
  vars_files:
    - ../config.yml  
    - ../software.yml
  tasks:
    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Number}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                     Target.Datastore: {{ Target.Datastore }}
                                     Target.ISOFolder: {{ Target.ISOFolder }}
                                      Target.ISOMount: {{ Target.ISOMount }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                         Deploy.Software.ESXi.Version: {{ Deploy.Software.ESXi.Version }}
                       Deploy.Software.ESXi.Installer: {{ Deploy.Software.ESXi.Installer }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        
    - name: Mount ESXi ISO
      action: mount name="{{ Target.ISOMount }}" src="{{ Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version]['Location'].Local }}/{{Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version].File }}" opts=loop fstype=iso9660 state=mounted

    - name: Copy ISO contents
      copy: 
        src: "{{ Target.ISOMount }}/"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"

    - name: Unmount ESXi ISO
      action: mount name="{{ Target.ISOMount }}" src="{{ Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version]['Location'].Local}}/{{Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version].File }}" fstype=iso9660 state=absent

    - name: Edit boot.cfg
      replace:
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/boot.cfg"
        regexp: 'kernelopt=cdromBoot runweasel'
        replace: 'kernelopt=ks=cdrom:/KS.CFG'

    - name: Create directory with modified ISO contents for each nested ESXi host
      copy:
        src: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Create KS.CFG for each nested ESXi host
      template: 
        src: "../templates/KS.CFG.j2"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}/KS.CFG"
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Create custom ESXi ISO for each nested ESXi host
      command: "xorrisofs -relaxed-filenames -J -R -o {{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }} -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ Target.TempFolder }}/{{ item.value.VMName }}/"
      args:
        chdir: "{{ Target.TempFolder }}/{{ item.value.VMName }}/"
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Upload the ESXi ISO to the datastore
      vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        src: "{{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }}" 
        datastore: "{{ Target.Datastore }}" 
        path: "{{ Target.ISOFolder }}/{{ Pod.Number }}{{ item.key }}"
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
      tags: upload
      
    - name: Delete local ISO content directory
      file:
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}"
        state: absent
      when: DEBUG.KeepInstallerFiles != true

    - name: Delete copies of ISO content directory
      file:
        path: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        state: absent
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true

    - name: Delete the ESXi ISO files
      file:
        path: "{{ Target.TempFolder }}/{{ Pod.Number }}{{ item.key }}" 
        state: absent
      loop: "{{ Nested_ESXi.Hosts | dict2items }}"
      when: 
        - Nested_Clusters[item.value.Cluster]['DeployHosts'] == true
        - DEBUG.KeepInstallerFiles != true
