---
- hosts: localhost
  name: createNsxEdgeTn.yml
  gather_facts: false
  vars:
      LOCAL_EdgeTnTemplate: "{{ Target.TemplateFolder }}/vars_NSXT_EdgeTransportNodes.j2"
  tasks:
    - name: Display error message if Pod-XXX-Config file is not valid or provided
      pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      meta: end_play
      when: Valid_Pod_Config_File is not defined

      
    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================


                                          Ansible Playbook: {{ ansible_play_name }}

                                         Target.Deployment: {{ Target.Deployment }}

                  Nested_NSXT.Components.LocalManager.FQDN: {{ Nested_NSXT.Components.LocalManager.FQDN }}

          Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes: {{ Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true

    - name: Read the structure from template into a variable
      set_fact:
        var_EdgeTransportNodes: "{{ lookup('template', LOCAL_EdgeTnTemplate) | from_yaml }}"
      when:
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true

    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display var_EdgeTransportNodes Variable ===================================

              var_EdgeTransportNodes: {{ var_EdgeTransportNodes | to_nice_yaml(indent=2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true
        - var_EdgeTransportNodes != ""

    - name: Deploy and configure Edge Transport Nodes
      nsxt_transport_nodes:
        hostname: "{{ Nested_NSXT.Components.LocalManager.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: False
        display_name: "{{ item.display_name }}"
        description: "{{ item.description }}"
        host_switch_spec:
          resource_type: StandardHostSwitchSpec
          host_switches: "{{ item.host_switches }}"
        node_deployment_info: "{{ item.node_deployment_info }}"
        tags: "{{ item.tags }}"
        state: present 
      loop: "{{ var_EdgeTransportNodes }}"
      when:
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true
        - var_EdgeTransportNodes != ""
      async: 1800
      poll: 0

    - name: Wait 1 minute for the NSX-T API to process Edge transport node deployment information
      pause: minutes=1
      when: 
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true
        - var_EdgeTransportNodes != ""

    - name: Wait until the NSX-T API reports that no Edge transport nodes are in "PENDING" state
      uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN }}/api/v1/transport-nodes/state?status=PENDING
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: (result.json.result_count | default(1))  == 0
      retries: 90
      delay: 60
      when: 
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true
        - var_EdgeTransportNodes != ""

    - name: Wait until the NSX-T API reports that no Edge transport nodes are in "IN_PROGRESS" state
      uri:
        url: https://{{ Nested_NSXT.Components.LocalManager.FQDN }}/api/v1/transport-nodes/state?status=IN_PROGRESS
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: (result.json.result_count | default(1)) == 0
      retries: 90
      delay: 60
      when: 
        - Deploy.NSXT.LocalManager == true
        - Deploy.NSXT.Edge == true
        - var_EdgeTransportNodes != ""
