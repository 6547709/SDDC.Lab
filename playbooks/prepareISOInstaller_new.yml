## Rutger has ownership of this file for the v2 migration ##
##
## Work in progress. Only partially functional.
##
---
- hosts: localhost
  name: prepareISOInstaller.yml
  gather_facts: false
  vars_files:
    - ../config.yml  
    - ../software.yml
  tasks:
    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Number}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                     Target.Datastore: {{ Target.Datastore }}
                                     Target.ISOFolder: {{ Target.ISOFolder }}
                                      Target.ISOMount: {{ Target.ISOMount }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                         Deploy.Software.ESXi.Version: {{ Deploy.Software.ESXi.Version }}
                       Deploy.Software.ESXi.Installer: {{ Deploy.Software.ESXi.Installer }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Generate local variables to speed up iteration
      set_fact:
        LOCAL_Nested_ESXiHosts: "{{ Nested_ESXi.Hosts }}"
        LOCAL_Nested_Clusters: "{{ Nested_Clusters }}"
        
    - name: Mount ESXi ISO
      action: mount name='{{ Target.ISOMount }}/ESXi' src="{{ Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version]['Location'].Local }}/{{Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version].File }}" opts=loop fstype=iso9660 state=mounted

    - name: Copy ISO contents
      copy: 
        src: "{{ Target.ISOMount }}/ESXi/"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
        force: false

    - name: Unmount ESXi ISO
      action: mount name='{{ Target.ISOMount }}/ESXi' src="{{ Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version]['Location'].Local}}/{{Software[Deploy.Software.ESXi.Vendor][Deploy.Software.ESXi.Product]['Installers'][Deploy.Software.ESXi.Version].File }}" fstype=iso9660 state=absent

    - name: Edit boot.cfg
      replace:
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/boot.cfg"
        regexp: 'kernelopt=cdromBoot runweasel'
        replace: 'kernelopt=ks=file://etc/vmware/weasel/KS.CFG'

    - name: Insert customks.tgz in boot.cfg modules section
      replace:
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/boot.cfg"
        regexp: 'imgpayld.tgz$'
        replace: 'imgpayld.tgz --- /customks.tgz'

## New and modified tasks ###

    - name: Duplicate directory with modified ISO contents
      copy:
        src: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
        dest: "{{ Target.TempFolder }}/{{ item.value.VMName }}"
        force: false
      loop: "{{ LOCAL_Nested_ESXiHosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Create required directory structure for KS.CFG files
      file:
        path: "{{ Target.ISOMount }}/{{ item.key }}/etc/vmware/weasel"
        state: directory
      loop: "{{ LOCAL_Nested_ESXiHosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Create KS.CFG for each nested ESXi
      template: 
        src: "../templates/KS.CFG.j2"
        dest: "{{ Target.ISOMount }}/{{ item.key }}/etc/vmware/weasel/KS.CFG"
      loop: "{{ LOCAL_Nested_ESXiHosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

    - name: Compress KS.CFG with directory structure to customks.tgz
      command: "tar -cvzf {{ Target.TempFolder }}/{{ item.value.VMName }}/customks.tgz etc"
      args:
        chdir: "{{ Target.ISOMount }}/{{ item.key }}"
      loop: "{{ LOCAL_Nested_ESXiHosts | dict2items }}"
      when: Nested_Clusters[item.value.Cluster]['DeployHosts'] == true

 #   - name: Create custom ESXi ISO
 #     command: "xorrisofs -relaxed-filenames -J -R -o {{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
 #     args:
 #       chdir: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
#
 #   - name: Upload the ESXi ISO to the datastore
 #     vsphere_copy: 
 #       hostname: "{{ Target.FQDN }}"
 #       username: "{{ Target.User }}"
 #       password: "{{ Target.Password }}"
 #       validate_certs: no
 #       src: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}.iso" 
 #       datastore: "{{ Target.Datastore }}" 
 #       path: "{{ Target.ISOFolder }}/{{ Deploy.Software.ESXi.Installer }}.iso"
 #     tags: upload
 #     
 #   - name: Delete temporary directory
 #     file:
 #       path: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}/"
 #       state: absent
#
 #   - name: Delete custom ESXi ISO on local filesystem
 #     file:
 #       path: "{{ Target.TempFolder }}/{{ Deploy.Software.ESXi.Installer }}.iso"
 #       state: absent