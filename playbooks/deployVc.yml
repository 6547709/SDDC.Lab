## Luis has ownership of converting this file to v2
---
- hosts: localhost
  name: deployVc.yml
  gather_facts: false
  vars_files:
    - ../config.yml
    - ../software.yml
  tasks:
    - name: DEBUG -- Display Target Variables (Pause)
      pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Number}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}
                                      Target.ISOMount: {{ Target.ISOMount }}

                                 Full ISO Mount Point: {{ Target.ISOMount }}/VCSA

                                               Vendor: {{ Deploy.Software.vCenter.Vendor }}
                                              Product: {{ Deploy.Software.vCenter.Product }}
                                              Version: {{ Deploy.Software.vCenter.Version }}
                                       Location.Local: {{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Location'].Local }}
                                                 File: {{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version].File }}

                                        Host Template: {{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Template'].ESXi }}
                                     vCenter Template: {{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Template'].vCenter }}
                                Installation Template: {{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Check if vCenter is already installed
      uri:
        url: https://{{ Nested_vCenter.Address.IPv4.Address }}
        validate_certs: False
        timeout: 5
      register: vcenter_check
      ignore_errors: True
      failed_when: false
      no_log: True

    - name: Create vCenter with embedded PSC installtion template (Target=Host)
      template: 
        src: "../templates/{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Template'].ESXi }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "Host"

    - name: Create vCenter with embedded PSC installtion template (Target=vCenter)
      template: 
        src: "../templates/{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Template'].vCenter }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "vCenter"

    - name: Mount vCenter ISO
      action: mount name='{{ Target.ISOMount }}/VCSA' src="{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Location'].Local }}/{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version].File }}" opts=loop fstype=iso9660 state=mounted
      when: vcenter_check.status != 200

    - debug:
        msg: "Deploying vCenter will take about 20 minutes, so go grab a smoothie!!!"
      when: vcenter_check.status != 200
      
    - name: Perform vCenter CLI-based installation
      command: "./vcsa-deploy install --accept-eula --no-ssl-certificate-verification --acknowledge-ceip {{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
      args:
        chdir: "{{ Target.ISOMount }}/VCSA/vcsa-cli-installer/lin64/"
      register: vcdeploy
      ignore_errors: True
      when: vcenter_check.status != 200

    - name: Unmount vCenter ISO
      action: mount name='{{ Target.ISOMount }}/VCSA' src="{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version]['Location'].Local }}/{{ Software[Deploy.Software.vCenter.Vendor][Deploy.Software.vCenter.Product]['Installers'][Deploy.Software.vCenter.Version].File }}" opts=loop fstype=iso9660 state=absent
      when: vcenter_check.status != 200

    - name: Delete the temporary vCenter with embedded PSC installation template
      file: "path={{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }} state=absent"
      when: 
        - vcenter_check.status != 200
        - DEBUG.KeepConfigFiles != true

    - name: Create Datacenter
      vmware_datacenter:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        state: present
        validate_certs: False
      when: vcenter_check.status != 200

    - name: Create Clusters
      vmware_cluster:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        validate_certs: False
      with_dict: "{{ Nested_Clusters }}"
      when: 
        - vcenter_check.status != 200
        - item.value.DeployHosts == true

    - name: Enable DRS on each Cluster, if applicable
      vmware_cluster_drs:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        validate_certs: False
        enable_drs: "{{ item.value.DRS }}"
      with_dict: "{{ Nested_Clusters }}"
      when: 
        - vcenter_check.status != 200
        - item.value.DeployHosts == true
